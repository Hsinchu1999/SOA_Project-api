# frozen_string_literal: true

require 'rake/testtask'
require_relative 'require_app'

CODE = 'lib/'

task :defult do
  puts `rake -T`
end
desc 'Run tests once'
Rake::TestTask.new(:spec) do |t|
  t.pattern = 'spec/*_spec.rb'
  t.warning = false
end

desc 'Run env test'
task :env_test do
  require_relative 'config/environment'
  puts ENV['DATABASE_URL']
  puts "ENV['CWB_TOKEN']=#{ENV['CWB_TOKEN']}"
end

desc 'reboot db'
task :reboot_db do
  Rake::Task["setup_mbti"].execute
  Rake::Task["setup_attraction"].execute
  Rake::Task["setup_attr_ratings"].execute
end

desc 'update weather'
task :update_weather do
  sh 'ruby weather.rb'
end

desc 'setup mbti questions'
task :setup_mbti do
  require_relative 'config/environment'
  sh 'ruby setup_mbti.rb'
end

desc 'setup attractions'
task :setup_attraction do
  require_relative 'config/environment'
  require_app
  # CONFIG = YAML.safe_load(File.read('config/secrets.yml'))
  # CWB_TOKEN = CONFIG['test']['CWB_TOKEN']
  # puts 'In setup_attraction'
  # puts "ENV=#{ENV}"
  CITY = '新北市'
  NTPCAPI = TravellingSuggestions::NewTaiPeiCityGovernment::NTPCApi
  region = TravellingSuggestions::Mapper::RegionMapper.new('Taiwan', CITY).find_weather(ENV['CWB_TOKEN'])
  rebuilt_region = TravellingSuggestions::Repository::Regions.db_find_or_create(region)
  attractions = TravellingSuggestions::Mapper::AttractionNTPCMapper.new(NTPCAPI, region).find(0, 100)
  attractions.each do |attraction|
    TravellingSuggestions::Repository::Attractions.db_find_or_create(attraction)
  end
end

desc 'setup attraction mbti ratings'
task :setup_attr_ratings do
  require_relative 'config/environment'
  require_app
  attraction_ids = Array(1..100)
  attraction_ids.each do |attraction_id|
    rating_entity = TravellingSuggestions::Entity::AttractionMbtiRating.new(
      id: nil,
      attraction_id: attraction_id,
      ESTJ_like: 1,
      ESTJ_seen: 1,
      ENTJ_like: 1,
      ENTJ_seen: 1,
      ESFJ_like: 1,
      ESFJ_seen: 1,
      ENFJ_like: 1,
      ENFJ_seen: 1,
      ISTJ_like: 1,
      ISTJ_seen: 1,
      ISFJ_like: 1,
      ISFJ_seen: 1,
      INTJ_like: 1,
      INTJ_seen: 1,
      INFJ_like: 1,
      INFJ_seen: 1,
      ESTP_like: 1,
      ESTP_seen: 1,
      ESFP_like: 1,
      ESFP_seen: 1,
      ENTP_like: 1,
      ENTP_seen: 1,
      ENFP_like: 1,
      ENFP_seen: 1,
      ISTP_like: 1,
      ISTP_seen: 1,
      ISFP_like: 1,
      ISFP_seen: 1,
      INTP_like: 1,
      INTP_seen: 1,
      INFP_like: 1,
      INFP_seen: 1
    )
    puts rating_entity
    TravellingSuggestions::Repository::AttractionMbtiRatings.db_find_or_create(rating_entity)
  end
end

desc 'run tests'
task :db_spec do
  require_relative 'config/environment'
  sh 'ruby spec/gateway_database_spec.rb'
end

desc 'run api tests'
task :api_spec do
  require_relative 'config/environment'
  sh 'ruby spec/tests_acceptance/api_spec.rb'
end

task :run do
  sh 'bundle exec puma'
end

namespace :vcr do
  desc 'delete cassette fixtures'
  task :wipe do
    sh 'rm spec/fixtures/cassettes/*.yml' do |ok, _|
      puts(ok ? 'Cassettes deleted' : 'No cassettes found')
    end
  end
end

namespace :quality do
  desc 'run all quality checks'
  task all: %i[rubocop reek flog]

  task :rubocop do
    sh 'rubocop lib/'
  end

  task :reek do
    sh 'reek lib/cwb_api.rb'
  end

  task :flog do
    sh 'flog #(CODE)'
  end
end

desc 'Run application console'
task :console do
  sh 'pry -r ./load_all'
end

namespace :db do
  task :config do
    require 'sequel'
    require_relative 'config/environment'
    require_relative 'spec/helpers/database_helper'

    def app = TravellingSuggestions::App
  end

  desc 'Run migrations'
  task migrate: :config do
    Sequel.extension :migration
    puts "Migrating #{app.environment} database to latest"
    Sequel::Migrator.run(app.DB, 'db/migrations')
  end

  desc 'Wipe records from all tables'
  task wipe: :config do
    if app.environment == :production
      puts 'Do not damage production database!'
      return
    end
    require_app
    DatabaseHelper.wipe_database
  end

  desc 'Delete dev or test database file (set correct RACK_ENV)'
  task drop: :config do
    if app.environment == :production
      puts 'Do not damage production database!'
      return
    end

    FileUtils.rm(TravellingSuggestions::App.config.DB_FILENAME)
    puts "Deleted #{TravellingSuggestions::App.config.DB_FILENAME}"
  end
end

namespace :cache do
  task :config do
    require_relative 'config/environment' # load config info
    require_relative 'app/infrastructure/cache/*'
    @api = TravellingSuggestions::App
  end

  desc 'Directory listing of local dev cache'
  namespace :list do
    task :dev do
      puts 'Lists development cache'
      list = `ls _cache/rack/meta`
      puts 'No local cache found' if list.empty?
      puts list
    end

    task :test do
      puts 'Lists test cache'
      list = `ls _cache/rack/meta`
      puts 'No local cache found' if list.empty?
      puts list
    end

    desc 'Lists production cache'
    task :production => :config do
      puts 'Finding production cache'
      keys = TravellingSuggestions::Cache::Client.new(@api.config).keys
      puts 'No keys found' if keys.none?
      keys.each { |key| puts "Key: #{key}" }
    end
  end

  namespace :wipe do
    desc 'Delete development cache'
    task :dev do
      puts 'Deleting development cache'
      sh 'rm -rf _cache/*'
    end

    desc 'Delete production cache'
    task :production => :config do
      print 'Are you sure you wish to wipe the production cache? (y/n) '
      if $stdin.gets.chomp.downcase == 'y'
        puts 'Deleting production cache'
        wiped = TravellingSuggestions::Cache::Client.new(@api.config).wipe
        wiped.each_key { |key| puts "Wiped: #{key}" }
      end
    end
  end
end

desc 'Generates a 64 byte secret for Rack::Session'
task :new_session_secret do
  require 'base64'
  require 'securerandom'
  secret = SecureRandom.random_bytes(64).then { Base64.urlsafe_encode64(_1) }
  puts "SESSION_SECRET: #{secret}"
end
